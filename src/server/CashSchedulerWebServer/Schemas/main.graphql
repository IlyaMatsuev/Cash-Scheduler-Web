type User {
    id: Int!
    firstName: String
    lastName: String
    email: String!
    balance: Float!
}

type AuthTokensType {
    accessToken: String!
    refreshToken: String!
}

type TransactionType {
    typeName: String!
    iconUrl: String!
}

type Category {
    id: Int!
    name: String!
    transactionType: TransactionType!
    transactionTypeName: String!
    user: User
    isCustom: Boolean!
    iconUrl: String!
}

type Transaction {
    id: Int!
    title: String
    user: User!
    category: Category!
    amount: Float!
    date: String
}

type RegularTransaction {
    id: Int!
    title: String
    user: User!
    category: Category!
    amount: Float!
    date: String
    nextTransactionDate: String!
    interval: String!
}

type UserNotification {
    id: Int!
    title: String!
    content: String!
    user: User
    read: Boolean!
}

type UserSetting {
    id: Int!
    name: String!
    value: String
    unitName: String!
    user: User!
}


type Query {
    getUser: User!
    checkEmail(email: String!): String!
    checkCode(email: String!, code: String!): String!

    getTransactionTypes: [TransactionType!]

    getAllCategories(transactionType: String): [Category!]
    getStandardCategories: [Category!]
    getCustomCategories: [Category!]

    getAllTransactions(size: Int): [Transaction!]
    getTransactionsForLastDays(days: Int): [Transaction!]
    getTransactionsByMonth(month: Int!, year: Int!): [Transaction!]

    getAllRegularTransactions(size: Int, month: Int, year: Int): [RegularTransaction!]

    getAllCurrencies: [Currency!]

    getAllNotifications: [Notification!]
    getUnreadNotifications: [Notification!]

    getUserSettings(unitName: String): [UserSetting!]
}


input NewUserInput {
    firstName: String
    lastName: String
    email: String!
    password: String!
    balance: Float
}

input UpdateUserInput {
    id: Int!
    firstName: String
    lastName: String
    balance: Float
}

input NewCategoryInput {
    name: String!
    transactionTypeName: String!
    iconUrl: String
}

input UpdateCategoryInput {
    id: Int!
    name: String
    iconUrl: String
}

input NewTransactionInput {
    title: String
    categoryId: Int!
    amount: Float!
    date: DateTime
}

input UpdateTransactionInput {
    id: Int!
    title: String
    amount: Float
    date: String
}

input NewRegularTransactionInput {
    title: String
    category_id: Int!
    amount: Float!
    date: String
    nextTransactionDate: String!
    interval: String!
}

input UpdateRegularTransactionInput {
    id: Int!
    title: String
    amount: Float
}

input UpdateUserSettingInput {
    name: String!
    value: String
    unitName: String!
}


type Mutation {
    login(email: String!, password: String!): AuthTokensType!
    logout: User!
    register(user: NewUserInput!): User!
    token(email: String!, refreshToken: String!): AuthTokensType!
    resetPassword(email: String!, code: String!, password: String!): User!

    createCategory(category: NewCategoryInput!): Category!
    updateCategory(category: UpdateCategoryInput!): Category!
    deleteCategory(id: Int!): Category!

    createTransaction(transaction: NewTransactionInput!): Transaction!
    updateTransaction(transaction: UpdateTransactionInput!): Transaction!
    deleteTransaction(id: Int!): Transaction!

    createRegularTransaction(transaction: NewRegularTransactionInput!): RegularTransaction!
    updateRegularTransaction(transaction: UpdateRegularTransactionInput!): RegularTransaction!
    deleteRegularTransaction(id: Int!): RegularTransaction!

    readNotification(id: Int!): Notification!
    unreadNotification(id: Int!): Notification!

    updateUserSetting(setting: UpdateUserSettingInput!): UserSetting!
    updateUserSettings(settings: [UpdateUserSettingInput!]): UserSetting!

    updateUser(user: UpdateUserInput!): User!
}
